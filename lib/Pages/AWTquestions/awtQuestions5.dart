import 'package:finalpractice/Widgets/AWT.dart';
import 'package:flutter/material.dart';

var finalScore = 0;
var questionNumber = 0;
var set5 = new AwtUnit();

class AwtUnit {
  var questions = [
    "Ques.1. Thermal conductivity is least for",
    "Ques.2. Which method of heating is likely to give leading power factor?",
    "Ques.3. Direct resistance Heating is used in",
    "Ques.4. Which of the following method is suitable for heating of conduction medium?",
    "Ques.5. In dielectric heating, current flows through",
    "Ques.6. Which of the following is the desirable property of resistance heating elements materials?",
    "Ques.7. Which of the following is the ideal method of heating plastics?",
    "Ques.8. If f be the frequency then the dielectric loss is proportional to",
    "Ques.9. When E is the voltage impressed on the dielectric, the dielectric loss will be proportional to",
    "Ques.10. Mica is a:-",
    "Ques.11. The advantages of dielectric heating are",
    "Ques.12. For arc heating, the electrodes are made of",
    "Ques.13. For Gluing of wood, which method will be suitable for the purpose?",
    "Ques.14. Which of the following will happen if the thickness of the refractory wall of the furnace is increased?",
    "Ques.15. High frequency for induction heating can be generated by",
    "Ques.16. The advantages of High-frequency heating is",
    "Ques.17. The heating elements of an electric iron is composed of_____",
    "Ques.18. A freshly painted layer may be dried electronically by_______",
    "Ques.19. Choice of frequency for induction heating depends upon",
    "Ques.20. In induction heating, the skin depth of penetration is proportional to",
  ];

  var choices = [
    ["Air", "Water", "Glass", "Copper"],
    [
      "Electric arc heating",
      "Induction heating",
      "Dielectric heating",
      "Resistance heating"
    ],
    [
      "Electrode Boiler",
      "Salt-Bath furnace",
      "Resistance Welding",
      "All of the above"
    ],
    [
      "Radiant heating",
      "Eddy current heating",
      "Induction heating",
      "Indirect arc heating"
    ],
    [
      "Metallic conductor",
      "Ionic discharge between dielectric medium and the metallic conductor",
      "Dielectric",
      "Air"
    ],
    [
      "High resistivity",
      "High melting point",
      "Low-temperature coefficient",
      "All of the above"
    ],
    [
      "Oil fired furnace",
      "Resistance furnace heating",
      "Dielectric heating",
      "Coal-fired furnace"
    ],
    ["f", "f2", "1/f", "1/f2"],
    ["E", "E2", "1/E", "1/E2"],
    [
      "Insulating and dielectric material",
      "Dielectric material but not an insulator",
      "Insulating material but not dielectric",
      "Magnetic Material"
    ],
    [
      "Pollution free",
      "Uniform Heating",
      "Non-metallic heating",
      "All of the above"
    ],
    ["Copper", "Aluminum", "Graphite", "ACSR conductor"],
    [
      "Induction heating",
      "Resistance heating",
      "Dielectric heating",
      "Any of the above"
    ],
    [
      "Energy consumption will be decreased",
      "The temperature inside the furnace will fall",
      "The temperature on the outer surface of the furnace wall will drop",
      "Heat loss through furnace wall will be increased"
    ],
    [
      "Motor generator set",
      "Spark gap oscillator",
      "Vacuum tube oscillator",
      "Any of the above"
    ],
    [
      "Uniform heating",
      "More economical",
      "Less space requirement",
      "All of the above"
    ],
    ["Aluminium", "Copper", "Nichrome", "Constantan"],
    [
      "Emissive Heating",
      "Induction Heating",
      "Infrared heating",
      "Convection heating"
    ],
    [
      "Size of object",
      "Depth of penetration",
      "Resistivity of material",
      "All of the above"
    ],
    ["√Frequency", "1/Frequency", "1/√Frequency", "Frequency"]
  ];

  var correctAnswers = [
    "Copper",
    "Dielectric heating",
    "All of the above",
    "Induction heating",
    "Dielectric",
    "All of the above",
    "Dielectric heating",
    "f",
    "E",
    "Insulating and dielectric material",
    "All of the above",
    "Graphite",
    "Dielectric heating",
    "The temperature on the outer surface of the furnace wall will drop",
    "Any of the above",
    "All of the above",
    "Nichrome",
    "Infrared heating",
    "All of the above",
    "1/√Frequency",
  ];
}

class AWTSet5 extends StatefulWidget {
  @override
  State<StatefulWidget> createState() {
    return new AWTSet5State();
  }
}

class AWTSet5State extends State<AWTSet5> {
  @override
  Widget build(BuildContext context) {
    return new WillPopScope(
        onWillPop: () async => false,
        child: Scaffold(
          body: new Container(
            margin: const EdgeInsets.all(10.0),
            alignment: Alignment.topCenter,
            child: new Column(
              children: <Widget>[
                new Padding(padding: EdgeInsets.all(20.0)),

                new Container(
                  alignment: Alignment.centerRight,
                  child: new Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: <Widget>[
                      new Text(
                        "Question ${questionNumber + 1} of ${set5.questions.length}",
                        style: new TextStyle(fontSize: 22.0),
                      ),
                      new Text(
                        "Score: $finalScore",
                        style: new TextStyle(fontSize: 22.0),
                      )
                    ],
                  ),
                ),

                //image
                new Padding(padding: EdgeInsets.all(10.0)),
                Expanded(
                  child: Text(
                    set5.questions[questionNumber],
                    style: new TextStyle(
                      fontSize: 20.0,
                    ),
                  ),
                ),

                new Padding(padding: EdgeInsets.all(10.0)),

                Expanded(
                  child: new Column(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: <Widget>[
                      //button 1
                      new FlatButton(
                        color: Colors.blueGrey,
                        onPressed: () {
                          if (set5.choices[questionNumber][0] ==
                              set5.correctAnswers[questionNumber]) {
                            debugPrint("Correct");
                            finalScore++;
                          } else {
                            debugPrint("Wrong");
                          }
                          updateQuestion();
                        },
                        child: new Text(
                          set5.choices[questionNumber][0],
                          style: new TextStyle(
                              fontSize: 20.0, color: Colors.white),
                        ),
                      ),

                      //button 2
                      new FlatButton(
                        color: Colors.blueGrey,
                        onPressed: () {
                          if (set5.choices[questionNumber][1] ==
                              set5.correctAnswers[questionNumber]) {
                            debugPrint("Correct");
                            finalScore++;
                          } else {
                            debugPrint("Wrong");
                          }
                          updateQuestion();
                        },
                        child: new Text(
                          set5.choices[questionNumber][1],
                          style: new TextStyle(
                              fontSize: 20.0, color: Colors.white),
                        ),
                      ),
                      new FlatButton(
                        color: Colors.blueGrey,
                        onPressed: () {
                          if (set5.choices[questionNumber][2] ==
                              set5.correctAnswers[questionNumber]) {
                            debugPrint("Correct");
                            finalScore++;
                          } else {
                            debugPrint("Wrong");
                          }
                          updateQuestion();
                        },
                        child: new Text(
                          set5.choices[questionNumber][2],
                          style: new TextStyle(
                              fontSize: 20.0, color: Colors.white),
                        ),
                      ),

                      //button 4
                      new FlatButton(
                        color: Colors.blueGrey,
                        onPressed: () {
                          if (set5.choices[questionNumber][3] ==
                              set5.correctAnswers[questionNumber]) {
                            debugPrint("Correct");
                            finalScore++;
                          } else {
                            debugPrint("Wrong");
                          }
                          updateQuestion();
                        },
                        child: new Text(
                          set5.choices[questionNumber][3],
                          style: new TextStyle(
                              fontSize: 20.0, color: Colors.white),
                        ),
                      ),
                      new FlatButton(
                        color: Colors.yellow,
                        onPressed: () {
                          if (set5.choices[questionNumber][0] ==
                              set5.correctAnswers[questionNumber]) {
                            print(set5.correctAnswers[questionNumber]);
                          } else if (set5.choices[questionNumber][1] ==
                              set5.correctAnswers[questionNumber]) {
                            print(set5.correctAnswers[questionNumber]);
                          } else if (set5.choices[questionNumber][2] ==
                              set5.correctAnswers[questionNumber]) {
                            print(set5.correctAnswers[questionNumber]);
                          } else if (set5.choices[questionNumber][3] ==
                              set5.correctAnswers[questionNumber]) {
                            print(set5.correctAnswers[questionNumber]);
                          } else {
                            print('null');
                          }
                          return showDialog(
                            context: context,
                            builder: (context) => AlertDialog(
                              content:
                                  Text(set5.correctAnswers[questionNumber]),
                            ),
                          );
                        },
                        child: new Text(
                          "Show Answer",
                          style: new TextStyle(
                              fontSize: 15.0, color: Colors.black),
                        ),
                      ),
                    ],
                  ),
                ),

                new Padding(padding: EdgeInsets.all(15.0)),

                new Container(
                    alignment: Alignment.bottomCenter,
                    child: new MaterialButton(
                        minWidth: 240.0,
                        height: 30.0,
                        color: Colors.red,
                        onPressed: setQuiz,
                        child: new Text(
                          "Quit",
                          style: new TextStyle(
                              fontSize: 18.0, color: Colors.white),
                        ))),
              ],
            ),
          ),
        ));
  }

  void setstateq() {
    setState(() {
      questionNumber = 0;
      finalScore = 0;
    });
  }

  void setQuiz() {
    showDialog(
      context: context,
      builder: (context) {
        return SimpleDialog(title: Text('Quit this Quiz?'), children: <Widget>[
          SimpleDialogOption(
            onPressed: () {
              Navigator.of(context).pushNamedAndRemoveUntil(
                  '/first', (Route<dynamic> route) => false);
              setstateq();
            },
            child: Text(
              'Quit ',
              style: TextStyle(color: Colors.red),
            ),
          ),
          SimpleDialogOption(
            onPressed: () => Navigator.pop(context),
            child: Text(
              'Cancel',
            ),
          )
        ]);
      },
    );
  }

  void updateQuestion() {
    setState(() {
      if (questionNumber == set5.questions.length - 1) {
        Navigator.push(
            context,
            new MaterialPageRoute(
                builder: (context) => new Summary(
                      score: finalScore,
                    )));
      } else {
        questionNumber++;
      }
    });
  }
}

class Summary extends StatelessWidget {
  final int score;
  Summary({Key key, @required this.score}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return new WillPopScope(
      onWillPop: () async => false,
      child: Scaffold(
        body: new Container(
          child: new Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              new Text(
                "Final Score: $score",
                style: new TextStyle(fontSize: 35.0),
              ),
              new Padding(padding: EdgeInsets.all(30.0)),
              new FlatButton(
                color: Colors.red,
                onPressed: () {
                  questionNumber = 0;
                  finalScore = 0;
                  Navigator.push(context,
                      MaterialPageRoute(builder: (context) => AWTSet5()));
                },
                child: new Text(
                  "Reset Quiz",
                  style: new TextStyle(fontSize: 20.0, color: Colors.white),
                ),
              )
            ],
          ),
        ),
      ),
    );
  }
}
